openapi: 3.0.3
info:
  title: Ditto Server API - Users
  description: |
    User management endpoints for the Ditto Server API.
    
    **Important**: This API only accepts and returns JSON format. All requests with a body must have `Content-Type: application/json` header.
  version: 1.0.0
  contact:
    name: Ditto Server
  license:
    name: MIT
servers:
  - url: http://localhost:3000
    description: Local development server
security:
  - apiSecret: []

paths:
  /users:
    post:
      summary: Create a new user
      description: Creates a new user with the provided information
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - phone
              properties:
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                phone:
                  type: string
                  example: "+1234567890"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "123e4567-e89b-12d3-a456-426614174000"
                      firstName:
                        type: string
                        example: "John"
                      lastName:
                        type: string
                        example: "Doe"
                      email:
                        type: string
                        example: "john.doe@example.com"
                      phone:
                        type: string
                        example: "+1234567890"
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
        '400':
          description: Bad Request - Missing or invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing required fields"
                  message:
                    type: string
                    example: "firstName, lastName, email, and phone are required"
        '409':
          description: Conflict - User with email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Conflict"
                  message:
                    type: string
                    example: "User with this email already exists"
      tags:
        - Users
  /users/{id}:
    get:
      summary: Get user by ID
      description: Retrieves a specific user by their ID (requires authentication)
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      firstName:
                        type: string
                      lastName:
                        type: string
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
                  message:
                    type: string
                    example: "Authentication required"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Not found"
                  message:
                    type: string
                    example: "User not found"
      tags:
        - Users
  /users/me:
    get:
      summary: Get authenticated user profile
      description: Returns the profile information of the currently authenticated user
      operationId: getMe
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "46411103-be20-423a-9a54-3cce3fa62fe5"
                  phone:
                    type: string
                    example: "+1234567890"
                  firstName:
                    type: string
                    example: "User"
                  lastName:
                    type: string
                    example: "User"
                  email:
                    type: string
                    example: "+1234567890@temp.com"
                  createdAt:
                    type: string
                    format: date-time
                    example: "2025-09-14T16:32:26.000Z"
                  updatedAt:
                    type: string
                    format: date-time
                    example: "2025-09-14T16:32:26.000Z"
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
                  message:
                    type: string
                    example: "Authentication required"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Not found"
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
                  message:
                    type: string
                    example: "Failed to get user profile"
      tags:
        - Users
    put:
      summary: Update authenticated user profile
      description: Updates the profile information of the currently authenticated user
      operationId: updateMe
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                phone:
                  type: string
                  example: "+1234567890"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "46411103-be20-423a-9a54-3cce3fa62fe5"
                  firstName:
                    type: string
                    example: "John"
                  lastName:
                    type: string
                    example: "Doe"
                  email:
                    type: string
                    example: "john.doe@example.com"
                  phone:
                    type: string
                    example: "+1234567890"
                  createdAt:
                    type: string
                    format: date-time
                    example: "2025-09-14T16:32:26.000Z"
                  updatedAt:
                    type: string
                    format: date-time
                    example: "2025-09-14T16:47:30.000Z"
        '400':
          description: Bad Request - Missing or invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bad request"
                  message:
                    type: string
                    example: "Invalid request data"
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
                  message:
                    type: string
                    example: "Authentication required"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Not found"
                  message:
                    type: string
                    example: "User not found"
        '409':
          description: Conflict - User with email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Conflict"
                  message:
                    type: string
                    example: "User with this email already exists"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
                  message:
                    type: string
                    example: "Failed to update user profile"
      tags:
        - Users

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiSecret:
      type: apiKey
      in: header
      name: X-API-Secret
      description: API secret key required for all requests

tags:
  - name: Users
    description: User management endpoints
