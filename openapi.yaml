openapi: 3.0.3
info:
  title: Ditto Server API
  description: |
    A ready-to-use easy-to-clone REST API server built with Node.js, Express, and TypeScript.
    
    **Important**: This API only accepts and returns JSON format. All requests with a body must have `Content-Type: application/json` header.
  version: 1.0.0
  contact:
    name: Ditto Server
  license:
    name: MIT
servers:
  - url: http://localhost:3000
    description: Local development server
security:
  - apiSecret: []
paths:
  /ping:
    get:
      summary: Health check endpoint
      description: Returns a 204 No Content status to indicate the server is running and healthy
      operationId: ping
      responses:
        '204':
          description: No Content - Server is healthy and responsive
          content: {}
        '400':
          description: Bad Request - Invalid content type
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bad Request"
                  message:
                    type: string
                    example: "Content-Type must be application/json"
                  code:
                    type: string
                    example: "INVALID_CONTENT_TYPE"
        '401':
          description: Unauthorized - Missing or invalid API secret
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
                  message:
                    type: string
                    example: "Missing required header: X-API-Secret"
                  code:
                    type: string
                    example: "MISSING_SECRET_HEADER"
        '429':
          description: Too Many Requests - Rate limit exceeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Too many requests, please try again later."
        '500':
          description: Internal Server Error - Unexpected server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"
                  message:
                    type: string
                    example: "An unexpected error occurred. Please try again later."
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
      tags:
        - Health
  /debug/env:
    get:
      summary: Environment debug endpoint
      description: Returns current environment configuration and feature flags (development only)
      operationId: debugEnv
      responses:
        '200':
          description: Environment configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  environment:
                    type: string
                    example: "development"
                  port:
                    type: integer
                    example: 3000
                  features:
                    type: object
                    properties:
                      enableDebugRoutes:
                        type: boolean
                        example: true
                      enableMockData:
                        type: boolean
                        example: true
                      enableExperimentalFeatures:
                        type: boolean
                        example: true
        '401':
          description: Unauthorized - Missing or invalid API secret
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
                  message:
                    type: string
                    example: "Missing required header: X-API-Secret"
                  code:
                    type: string
                    example: "MISSING_SECRET_HEADER"
        '404':
          description: Not Found - Debug endpoint not available in this environment
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Debug endpoint not available in production"
      tags:
        - Debug
  /debug/last-otp:
    get:
      summary: Get last OTP for testing
      description: Returns the last generated OTP for testing purposes (development only)
      operationId: debugLastOtp
      responses:
        '200':
          description: Last OTP information
          content:
            application/json:
              schema:
                type: object
                properties:
                  phone:
                    type: string
                    example: "+1234567890"
                  otp:
                    type: string
                    example: "567890"
                  otpId:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  message:
                    type: string
                    example: "No OTP sent yet"
        '404':
          description: Not Found - Debug endpoint not available in this environment
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Debug endpoint not available in production"
      tags:
        - Debug
  /debug/error:
    get:
      summary: Test error handling endpoint
      description: Triggers an error to test the global error handler (development only)
      operationId: debugError
      responses:
        '500':
          description: Internal Server Error - Test error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"
                  message:
                    type: string
                    example: "An unexpected error occurred. Please try again later."
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  details:
                    type: string
                    example: "Test error for error handling demonstration"
                  stack:
                    type: string
                    example: "Error: Test error for error handling demonstration\n    at ..."
        '404':
          description: Not Found - Debug endpoint not available in this environment
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Debug endpoint not available in production"
      tags:
        - Debug
  /users:
    post:
      summary: Create a new user
      description: Creates a new user with the provided information
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - phone
              properties:
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                phone:
                  type: string
                  example: "+1234567890"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "123e4567-e89b-12d3-a456-426614174000"
                      firstName:
                        type: string
                        example: "John"
                      lastName:
                        type: string
                        example: "Doe"
                      email:
                        type: string
                        example: "john.doe@example.com"
                      phone:
                        type: string
                        example: "+1234567890"
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
        '400':
          description: Bad Request - Missing or invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing required fields"
                  message:
                    type: string
                    example: "firstName, lastName, email, and phone are required"
        '409':
          description: Conflict - User with email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Conflict"
                  message:
                    type: string
                    example: "User with this email already exists"
      tags:
        - Users
  /users/{id}:
    get:
      summary: Get user by ID
      description: Retrieves a specific user by their ID (requires authentication)
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      firstName:
                        type: string
                      lastName:
                        type: string
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
                  message:
                    type: string
                    example: "Invalid or missing authentication token"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Not found"
                  message:
                    type: string
                    example: "User not found"
      tags:
        - Users
  /users/me:
    get:
      summary: Get authenticated user profile
      description: Returns the profile information of the currently authenticated user
      operationId: getMe
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "46411103-be20-423a-9a54-3cce3fa62fe5"
                  phone:
                    type: string
                    example: "+1234567890"
                  firstName:
                    type: string
                    example: "User"
                  lastName:
                    type: string
                    example: "User"
                  email:
                    type: string
                    example: "+1234567890@temp.com"
                  createdAt:
                    type: string
                    format: date-time
                    example: "2025-09-14T16:32:26.000Z"
                  updatedAt:
                    type: string
                    format: date-time
                    example: "2025-09-14T16:32:26.000Z"
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
                  message:
                    type: string
                    example: "Invalid or missing authentication token"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Not found"
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
                  message:
                    type: string
                    example: "Failed to get user profile"
      tags:
        - Users
    put:
      summary: Update authenticated user profile
      description: Updates the profile information of the currently authenticated user
      operationId: updateMe
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                phone:
                  type: string
                  example: "+1234567890"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "46411103-be20-423a-9a54-3cce3fa62fe5"
                  firstName:
                    type: string
                    example: "John"
                  lastName:
                    type: string
                    example: "Doe"
                  email:
                    type: string
                    example: "john.doe@example.com"
                  phone:
                    type: string
                    example: "+1234567890"
                  createdAt:
                    type: string
                    format: date-time
                    example: "2025-09-14T16:32:26.000Z"
                  updatedAt:
                    type: string
                    format: date-time
                    example: "2025-09-14T16:47:30.000Z"
        '400':
          description: Bad Request - Missing or invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bad request"
                  message:
                    type: string
                    example: "At least one field (firstName, lastName, email, phone) must be provided for update"
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
                  message:
                    type: string
                    example: "Invalid or missing authentication token"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Not found"
                  message:
                    type: string
                    example: "User not found"
        '409':
          description: Conflict - User with email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Conflict"
                  message:
                    type: string
                    example: "User with this email already exists"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
                  message:
                    type: string
                    example: "Failed to update user"
      tags:
        - Users
  /auth/send-otp:
    post:
      summary: Send OTP to phone number
      description: Sends a one-time password (OTP) to the specified phone number for authentication
      operationId: sendOtp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone
              properties:
                phone:
                  type: string
                  format: phone
                  example: "+1234567890"
                  description: Phone number in international format
      responses:
        '204':
          description: OTP sent successfully
          content: {}
        '400':
          description: Bad Request - Invalid phone number format
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid phone number"
                  message:
                    type: string
                    example: "Please provide a valid phone number in international format (e.g., +1234567890)"
        '429':
          description: Too Many Requests - Rate limit exceeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Too many requests"
                  message:
                    type: string
                    example: "Too many OTP requests. Please try again later."
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
                  message:
                    type: string
                    example: "Failed to send OTP"
      tags:
        - Authentication
  /auth/verify-otp:
    post:
      summary: Verify OTP and get authentication token
      description: Verifies the OTP code and returns an authentication token if valid
      operationId: verifyOtp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone
                - otp
              properties:
                phone:
                  type: string
                  format: phone
                  example: "+1234567890"
                  description: Phone number in international format
                otp:
                  type: string
                  example: "567890"
                  description: 6-digit OTP code
      responses:
        '200':
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJ1c2VySWQiOiI0NjQxMTEwMy1iZTIwLTQyM2EtOWE1NC0zY2NlM2ZhNjJmZTUiLCJwaG9uZSI6IisxMjM0NTY3ODkwIiwiaWF0IjoxNzU3ODY0NTI4LCJleHAiOjE3NTc4NjQ4Mjh9"
                    description: JWT authentication token (valid for 5 minutes)
        '400':
          description: Bad Request - Invalid or missing data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bad request"
                  message:
                    type: string
                    example: "Phone number and OTP are required"
        '401':
          description: Unauthorized - Invalid or expired OTP
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid OTP"
                  message:
                    type: string
                    example: "Invalid or expired OTP"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Not found"
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
                  message:
                    type: string
                    example: "Failed to verify OTP"
      tags:
        - Authentication
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiSecret:
      type: apiKey
      in: header
      name: X-API-Secret
      description: API secret key required for all requests
tags:
  - name: Health
    description: Health check and monitoring endpoints
  - name: Debug
    description: Debug and development endpoints (development environment only)
  - name: Users
    description: User management endpoints
  - name: Authentication
    description: Phone-based OTP authentication endpoints
